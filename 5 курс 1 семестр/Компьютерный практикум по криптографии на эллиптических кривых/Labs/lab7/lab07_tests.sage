from sage.all import *


def Check_curve(p, a, b, l):
    """
    TESTS::
    sage: Check_curve(8493869, 7716998, 8380837, 12)
    True

    sage: Check_curve(16185823, 1696091, 5442612, 12)
    False

    sage: Check_curve(20130339667708248456904929384531448722932664153581, 17129189218710592817862284027173420974003721615799, 9933953273954952502486306587094192265174690390760, 80)
    False

    sage: Check_curve(18517062478089064091750711292984871722854947888561, 16409803157791443980951396504074324345406928955572, 8566257301100838622549891376490782909808842330172, 80)
    True

    sage: Check_curve(65229303612666993838487548193316216197113003608034571328105362153899, 53897376765104893430449475283994604973710245797009962721888058654198, 9261518103108318988773972757009869873708914052885630873937644761546, 112)
    False

    sage: Check_curve(409013755073188693650591431115381887523332154671755341927870523529923, 26707281847917853313956618577696843880528443302488143377136407323763, 159677408287411098813469573525383793092218678960537036028752956177, 112)
    True

    sage: Check_curve(302436443231099890936304321538187886712840058607361932404994076011536837773503467, -1, 0, 132)
    False

    sage: Check_curve(730750818665451459112596905638433048232067471723, 425706413842211054102700238164133538302169176474, 203362936548826936673264444982866339953265530166, 160)
    False
    """

    F = GF(p)
    E = EllipticCurve(F, [a, b])
    ord_E = E.order()
    r = max(prime_factors(ord_E))

    # ? Проверка на стойкость к методу Полига-Хеллмана
    if 100 <= ord_E // r:
        return False

    # ? Проверка на стойкость к Ро-методу Полларда
    if (2 ^ (2 * l) - 1) <= ord_E <= (2 ^ (2 * l) + 1):
        return False

    # ? Проверка на стойкость к спуску Вейля
    if not is_prime(p):
        return False

    # ? Проверка на стойкость к атакам на спариваниях
    k = 24
    for k_i in range(1, k + 1):
        if (p ^ k_i - 1) % r == 0:
            return False

    # ? Проверка на то, что кривая не аномальная
    if ord_E == p:
        return False

    return True
